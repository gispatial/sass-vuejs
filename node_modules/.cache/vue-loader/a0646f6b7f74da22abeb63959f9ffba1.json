{"remainingRequest":"/Users/crocslut/Desktop/xdt-033/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/crocslut/Desktop/xdt-033/src/views/Index.vue?vue&type=template&id=23543608&","dependencies":[{"path":"/Users/crocslut/Desktop/xdt-033/src/views/Index.vue","mtime":1615175928044},{"path":"/Users/crocslut/Desktop/xdt-033/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/crocslut/Desktop/xdt-033/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/crocslut/Desktop/xdt-033/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/crocslut/Desktop/xdt-033/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}