{"remainingRequest":"/Users/crocslut/Desktop/xdt-033/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/crocslut/Desktop/xdt-033/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/xdt-033/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/crocslut/Desktop/xdt-033/src/views/Landing.vue?vue&type=template&id=a8baa566&","dependencies":[{"path":"/Users/crocslut/Desktop/xdt-033/src/views/Landing.vue","mtime":1615175928044},{"path":"/Users/crocslut/Desktop/xdt-033/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/crocslut/Desktop/xdt-033/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/crocslut/Desktop/xdt-033/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/crocslut/Desktop/xdt-033/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}